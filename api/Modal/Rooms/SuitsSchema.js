const SuitsSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: [true, "name of suit is required"],
      trim: true,
      unique: true,
      maxLength: [100, "name of suit must be at most 100 chars"],
    },
    description: {
      type: String,
      required: [true, "description of suit is required"],
      trim: true,
      maxLength: [1000, "description of suit must be at most 1000 chars"],
    },
    images: [
      {
        secure_url: {
          type: String,
          required: [true, "secure_url is required"],
          validate: [
            {
              validator: function (v) {
                return /(http(s?):\/\/(www\.)?)|(ftp:\/\/(www\.)?)/.test(v);
              },
              message: "secure_url must be a valid url",
            },
          ],
        },
      },
    ],
    bed: {
      type: String,
      required: [true, "bed type is required"],
      enum: [
        "Single",
        "Double",
        "Twin",
        "Queen",
        "King",
        "California King",
        "Eastern King",
        "Murphy",
        "Sofa Bed",
        "Bunk Bed",
        "Other",
      ],
    },
    amenities: {
      type: [String],
      required: [true, "amenities are required"],
      enum: [
        "Air Conditioner",
        "Heating",
        "Private Bathroom",
        "Private Balcony",
        "Free Wi-Fi",
        "Flat-screen TV",
        "Cable TV",
        "Satellite TV",
        "Refrigerator",
        "Microwave",
        "Electric Kettle",
        "Coffee Maker",
        "Hair Dryer",
        "Ironing Board",
        "Desk",
        "Safe",
        "Mini Bar",
        "Wake-up Service",
        "Towels",
        "Bed Linen",
        "Free Toiletries",
        "Bathrobe",
        "Slippers",
        "Daily Housekeeping",
        "Room Service",
        "Tour/Ticket Assistance",
        "Concierge Service",
        "Currency Exchange",
        "Dry Cleaning",
        "Laundry",
        "Meeting/Banquet Facilities",
        "Business Center",
        "Fax/Photocopying",
        "Newspaper",
        "Shoeshine",
        "VIP Room Facilities",
        "Babysitting/Child Services",
        "Children's Playground",
        "Kids' Club",
        "Game Room",
        "Fitness Center",
        "Spa and Wellness Center",
        "Jacuzzi",
        "Sauna",
        "Outdoor Pool",
        "Indoor Pool",
        "Private Pool",
        "Beach",
        "Garden",
        "Tennis Court",
        "Volleyball",
        "Golf Course",
        "Fishing",
        "Hiking",
        "Bicycle Rental",
        "Car Rental",
        "Airport Shuttle",
        "Free Parking",
        "Paid Parking",
        "Electric Vehicle Charging Station",
        "Smoking Area",
        "Designated Smoking Area",
        "Pets Allowed",
        "Pet Sitting",
        "Pet Grooming",
        "Pet Walking",
        "Other",
      ],
    },
    price: {
      type: Number,
      required: [true, "price is required"],
      min: [0, "price must be at least 0"],
      max: [100000, "price must be at most 100000"],
    },
    currency: {
      type: String,
      required: [true, "currency is required"],
      enum: ["USD", "EUR", "GBP", "INR", "AUD", "CAD", "CNY", "JPY", "other"],
      trim: true,
    },
    location: {
      type: {
        type: String,
        required: [true, "location type is required"],
        enum: ["Point"],
      },
      coordinates: {
        type: [Number],
        required: [true, "location coordinates are required"],
        validate: [
          {
            validator: (v) => v.length === 2,
            message: "location coordinates must have two values",
          },
        ],
      },
    },
    hotel: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Hotel",
      required: [true, "hotel is required"],
    },
    rating: {
      type: Number,
      default: 0,
      min: [0, "rating must be at least 0"],
      max: [5, "rating must be at most 5"],
    },
    reviews: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Review",
        required: false,
      },
    ],
    slugName: {
      type: String,
      unique: true,
    },
  },
  {
    timestamps: true,
  }
);
